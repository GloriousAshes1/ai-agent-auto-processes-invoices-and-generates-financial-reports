import streamlit as st
from invoice_processor_agent import InvoiceProcessorAgent
import os
import pandas as pd
from PIL import Image
from datetime import datetime
from utils import find_available_logs
import shutil

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Tr·ª£ l√Ω K·∫ø to√°n AI", layout="wide")

# --- Kh·ªüi t·∫°o Agent (ch·ªâ m·ªôt l·∫ßn) ---
# S·ª≠ d·ª•ng cache c·ªßa Streamlit ƒë·ªÉ kh√¥ng ph·∫£i load l·∫°i model m·ªói l·∫ßn t∆∞∆°ng t√°c
@st.cache_resource
def load_agent():
    return InvoiceProcessorAgent()

agent = load_agent()
today_str = datetime.now().strftime("%Y-%m-%d")
EXCEL_FILE = f"NhatKyKeToan_{today_str}.xlsx"

# --- Giao di·ªán ---
st.title("ü§ñ Tr·ª£ l√Ω K·∫ø to√°n AI: X·ª≠ l√Ω H√≥a ƒë∆°n")
st.write("T·∫£i l√™n ·∫£nh h√≥a ƒë∆°n c·ªßa b·∫°n, AI s·∫Ω t·ª± ƒë·ªông tr√≠ch xu·∫•t th√¥ng tin, ph√¢n lo·∫°i v√† l∆∞u v√†o file Excel.")

# T·∫°o 2 c·ªôt ƒë·ªÉ b·ªë c·ª•c ƒë·∫πp h∆°n
col1, col2 = st.columns(2)

with col1:
    st.header("1. T·∫£i l√™n h√≥a ƒë∆°n")
    uploaded_files = st.file_uploader(
        "Ch·ªçn m·ªôt file ·∫£nh h√≥a ƒë∆°n",
        type=["png", "jpg", "jpeg"],
        accept_multiple_files=True
    )

    # if uploaded_files is not None:
    #     # Hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫£i l√™n
    #     image = Image.open(uploaded_files)
    #     st.image(image, caption="H√≥a ƒë∆°n ƒë√£ t·∫£i l√™n", use_container_width=True)
    #
    #     # N√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω
    #     if st.button("X·ª≠ l√Ω H√≥a ƒë∆°n", type="primary"):
    #         # L∆∞u t·∫°m file ·∫£nh ƒë·ªÉ agent c√≥ th·ªÉ ƒë·ªçc
    #         temp_dir = "temp_uploads"
    #         if not os.path.exists(temp_dir):
    #             os.makedirs(temp_dir)
    #
    #         file_path = os.path.join(temp_dir, uploaded_file.name)
    #         with open(file_path, "wb") as f:
    #             f.write(uploaded_file.getbuffer())
    #
    #         # Ch·∫°y agent v√† hi·ªÉn th·ªã k·∫øt qu·∫£
    #         with st.spinner('AI ƒëang ph√¢n t√≠ch h√≥a ƒë∆°n... Vui l√≤ng ch·ªù trong gi√¢y l√°t...'):
    #             result = agent.run(file_path)
    #
    #         st.header("2. K·∫øt qu·∫£ tr√≠ch xu·∫•t")
    #         if result:
    #             st.success("X·ª≠ l√Ω th√†nh c√¥ng!")
    #             st.json(result)
    #         else:
    #             st.error("X·ª≠ l√Ω th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i ·∫£nh ho·∫∑c h√≥a ƒë∆°n.")
    #
    #         # X√≥a file t·∫°m
    #         os.remove(file_path)
    if uploaded_files:
        valid_results = []
        review_results = []

        if st.button(f"X·ª≠ l√Ω {len(uploaded_files)} h√≥a ƒë∆°n", type="primary"):
            st.header("2. K·∫øt qu·∫£ x·ª≠ l√Ω")
            progress_bar = st.progress(0, text="B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")

            today_str_folder = datetime.now().strftime("%d-%m-%Y")
            save_dir = os.path.join("uploaded_invoices", f"invoices_{today_str_folder}")
            os.makedirs(save_dir, exist_ok=True)

            for i, uploaded_file in enumerate(uploaded_files):
                # ... (c·∫≠p nh·∫≠t progress_bar v√† hi·ªÉn th·ªã expander nh∆∞ c≈©)
                progress_text = f"ƒêang x·ª≠ l√Ω file: {uploaded_file.name} ({i + 1}/{len(uploaded_files)})"
                progress_bar.progress((i + 1) / len(uploaded_files), text=progress_text)

                with st.expander(f"K·∫øt qu·∫£ cho file: **{uploaded_file.name}**", expanded=False):
                    # ... (l∆∞u file t·∫°m v√† hi·ªÉn th·ªã ·∫£nh nh∆∞ c≈©)
                    st.image(Image.open(uploaded_file), width=200)

                    temp_dir = "temp_uploads"
                    if not os.path.exists(temp_dir):
                        os.makedirs(temp_dir)
                    temp_file_path = os.path.join(temp_dir, uploaded_file.name)
                    with open(temp_file_path, "wb") as f:
                        f.write(uploaded_file.getbuffer())

                    # Ch·∫°y agent
                    result = agent.run(temp_file_path)

                    if result:
                        # 1. Sao ch√©p file v√†o th∆∞ m·ª•c l∆∞u tr·ªØ cu·ªëi c√πng
                        final_image_path = os.path.join(save_dir, uploaded_file.name)
                        try:
                            shutil.copy(temp_file_path, final_image_path)
                        except Exception as e:
                            st.warning(f"L·ªói khi l∆∞u tr·ªØ file ·∫£nh: {e}")

                        # 2. C·∫≠p nh·∫≠t l·∫°i ƒë∆∞·ªùng d·∫´n trong dictionary k·∫øt qu·∫£
                        result['invoice_path'] = final_image_path

                        # 3. Ph√¢n lu·ªìng d·ª±a tr√™n k·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                        if agent.action_agent.is_record_valid(result):
                            st.success("H·ª£p l·ªá! S·∫Ω ƒë∆∞·ª£c l∆∞u v√†o Nh·∫≠t k√Ω K·∫ø to√°n.")
                            valid_results.append(result)
                        else:
                            st.warning("H√≥a ƒë∆°n c√≥ v·∫•n ƒë·ªÅ! S·∫Ω ƒë∆∞·ª£c chuy·ªÉn cho nh√¢n vi√™n x·ª≠ l√Ω.")
                            review_results.append(result)
                        st.json(result)
                    else:
                        st.error("X·ª≠ l√Ω th·∫•t b·∫°i.")
                    os.remove(temp_file_path)

            st.divider()
            st.header("T·ªïng k·∫øt x·ª≠ l√Ω h√†ng lo·∫°t")

            # L·∫•y th√¥ng tin th√°ng v√† nƒÉm
            now = datetime.now()
            year_str = now.strftime("%Y")
            month_str = now.strftime("%m")  # v√≠ d·ª•: "08"
            today_str = now.strftime("%Y-%m-%d")

            # T·∫°o ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c nƒÉm/th√°ng (v√≠ d·ª•: NhatKyKeToan/2025/Thang_08)
            year_month_dir = os.path.join("NhatKyKeToan", year_str, f"Thang_{month_str}")  # << THAY ƒê·ªîI D√íNG N√ÄY
            os.makedirs(year_month_dir, exist_ok=True)

            # L∆∞u c√°c k·∫øt qu·∫£ h·ª£p l·ªá
            if valid_results:
                # T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file Excel c·ªßa ng√†y h√¥m nay
                excel_path_today = os.path.join(year_month_dir, f"NhatKyKeToan_{today_str}.xlsx")
                agent.action_agent.save_all_to_excel(valid_results, excel_path_today, 'NhatKyKeToan')
                st.success(f"ƒê√£ l∆∞u th√†nh c√¥ng {len(valid_results)} h√≥a ƒë∆°n h·ª£p l·ªá v√†o file {excel_path_today}.")
            else:
                st.info("Kh√¥ng c√≥ h√≥a ƒë∆°n h·ª£p l·ªá n√†o ƒë·ªÉ l∆∞u.")

            # L∆∞u c√°c k·∫øt qu·∫£ c·∫ßn review (file review v·∫´n gi·ªØ ·ªü th∆∞ m·ª•c g·ªëc cho ƒë∆°n gi·∫£n)
            if review_results:
                review_file = "CanXuLyBangTay.xlsx"
                agent.action_agent.save_all_to_excel(review_results, review_file, 'CanXuLy')
                st.warning(
                    f"ƒê√£ chuy·ªÉn {len(review_results)} h√≥a ƒë∆°n c√≥ v·∫•n ƒë·ªÅ ƒë·∫øn file {review_file} ƒë·ªÉ x·ª≠ l√Ω th·ªß c√¥ng.")
            else:
                st.info("Kh√¥ng c√≥ h√≥a ƒë∆°n n√†o c·∫ßn x·ª≠ l√Ω th·ªß c√¥ng.")

            st.balloons()

with col2:
    st.header("3. Tra c·ª©u S·ªï Nh·∫≠t k√Ω K·∫ø to√°n")

    # G·ªçi h√†m m·ªõi ƒë·ªÉ l·∫•y dictionary c√°c file log
    available_logs = find_available_logs()

    if not available_logs:
        st.info("Ch∆∞a c√≥ file Nh·∫≠t k√Ω K·∫ø to√°n n√†o ƒë∆∞·ª£c l∆∞u.")
    else:
        # S·∫Øp x·∫øp c√°c ng√†y (keys c·ªßa dictionary) ƒë·ªÉ hi·ªÉn th·ªã tr√™n selectbox
        sorted_dates = sorted(available_logs.keys(), reverse=True)

        selected_date = st.selectbox(
            "Ch·ªçn ng√†y ƒë·ªÉ xem l·∫°i d·ªØ li·ªáu:",
            options=sorted_dates
        )

        if selected_date:
            # L·∫•y ƒë∆∞·ªùng d·∫´n file tr·ª±c ti·∫øp t·ª´ dictionary - G·ªåN H∆†N R·∫§T NHI·ªÄU
            selected_excel_file_path = available_logs[selected_date]

            st.write(f"ƒêang hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ file: **{selected_excel_file_path}**")

            if os.path.exists(selected_excel_file_path):
                df_main = pd.read_excel(selected_excel_file_path)
                st.dataframe(df_main, use_container_width=True, height=250)

                with open(selected_excel_file_path, "rb") as file:
                    st.download_button(
                        label=f"üì• T·∫£i v·ªÅ file c·ªßa ng√†y {selected_date}",
                        data=file,
                        file_name=os.path.basename(selected_excel_file_path),
                        mime="application/vnd.ms-excel"
                    )
            else:
                st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file t·∫°i ƒë∆∞·ªùng d·∫´n '{selected_excel_file_path}'.")

st.divider()
st.header("‚ö†Ô∏è H√≥a ƒë∆°n c·∫ßn x·ª≠ l√Ω b·∫±ng tay")
review_file = "CanXuLyBangTay.xlsx"
if os.path.exists(review_file):
    df_review = pd.read_excel(review_file)
    st.dataframe(df_review, use_container_width=True, height=300)
else:
    st.info("Kh√¥ng c√≥ h√≥a ƒë∆°n n√†o c·∫ßn x·ª≠ l√Ω th·ªß c√¥ng.")
